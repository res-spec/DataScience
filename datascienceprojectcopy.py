# -*- coding: utf-8 -*-
"""DataScienceProjectCOPY.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cIbncprahC5ViyMmt_41NI3IkhDx77MC
"""

# import pandas
import pandas as pandas
# set link
link = 'https://storage.googleapis.com/kagglesdsdata/datasets/1713429/2804370/NFT_Sales.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20220115%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20220115T164617Z&X-Goog-Expires=259199&X-Goog-SignedHeaders=host&X-Goog-Signature=95150d908ec8ec5888bd5c77d3aa41b049a5d615ac6f2c53d099857b974241f4cd871c6d392c67e5e2bb2c25ce2bde943e2383efc09cbbba73633ad4d902227b42f462a65a136d7bd55a5a271aaf7939847b7a8a41763751c4bf2b7785c68adc2c0afa7192381cd1fc12ef0094c2b3cacf42c43befbbe50531ed6b5a2b986a4871309760018ea5b8b929bdf04202eece8d032b01d1bd41775f75fea32a4708877058d96638c82b0ec5edefb1064aed674278ef90b7c81af244323498d3aad3b0374f471bc0950cc3171dda44e2c70766b5595e01ccec6b203844bc16d6f926156295ba6f31c80e74f7817a2bbcd9ce170badee7976d11bdf6ae5f028c5b6d6dd'
# get csv from link
data_frame = pandas.read_csv(link)
# show head of table
data_frame.head(10)

"""# Yeni Bölüm"""

# count and show null values
print(data_frame.shape)
data_frame.isnull().sum()

# set null values = mean
data_frame['Secondary_Sales_cumsum'] = data_frame['Secondary_Sales_cumsum'].fillna(data_frame['Secondary_Sales_cumsum'].mean())
data_frame['AverageUSD_cum'] = data_frame['AverageUSD_cum'].fillna(data_frame['AverageUSD_cum'].mean())
data_frame['Sales_USD'] = data_frame['Sales_USD'].fillna(data_frame['Sales_USD'].mean())
data_frame['Number_of_Sales'] = data_frame['Number_of_Sales'].fillna(data_frame['Number_of_Sales'].mean())
data_frame['Active_Market_Wallets'] = data_frame['Active_Market_Wallets'].fillna(data_frame['Active_Market_Wallets'].mean())
data_frame['Primary_Sales'] = data_frame['Primary_Sales'].fillna(data_frame['Primary_Sales'].mean())
# fill null values with mean
data_frame = data_frame.fillna(0)

# show null values again
data_frame.head()

df.plot.line()

import pandas as pd
reviews = pd.read_csv("https://storage.googleapis.com/kagglesdsdata/datasets/1713429/2804370/NFT_Sales.csv?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com%2F20220115%2Fauto%2Fstorage%2Fgoog4_request&X-Goog-Date=20220115T164617Z&X-Goog-Expires=259199&X-Goog-SignedHeaders=host&X-Goog-Signature=95150d908ec8ec5888bd5c77d3aa41b049a5d615ac6f2c53d099857b974241f4cd871c6d392c67e5e2bb2c25ce2bde943e2383efc09cbbba73633ad4d902227b42f462a65a136d7bd55a5a271aaf7939847b7a8a41763751c4bf2b7785c68adc2c0afa7192381cd1fc12ef0094c2b3cacf42c43befbbe50531ed6b5a2b986a4871309760018ea5b8b929bdf04202eece8d032b01d1bd41775f75fea32a4708877058d96638c82b0ec5edefb1064aed674278ef90b7c81af244323498d3aad3b0374f471bc0950cc3171dda44e2c70766b5595e01ccec6b203844bc16d6f926156295ba6f31c80e74f7817a2bbcd9ce170badee7976d11bdf6ae5f028c5b6d6dd", index_col=0)
reviews.head()
data_frame.Sales_USD.plot.line()

data_frame.tail(20)

df = data_frame
df[data_frame[data_frame.columns[10]] < 0] = None
df['Secondary_Sales_cumsum'].interpolate(method='nearest', limit_direction ='backward', limit = 1000000)

data_frame.tail(20)
# df['B'] = new_val

# for col in data_frame.columns[1:]:
    # data_frame[col][data_frame[col] < 0] = 0

# import modules
import matplotlib.pyplot as pyplot
import seaborn as seaborn
# set size of figrue
pyplot.figure(figsize=(12, 10))
# show figure
seaborn.heatmap(data_frame.corr(), center=0, annot=True)

df = data_frame
# set size and dpi of figrue
pyplot.figure(figsize=(20, 10), dpi=150)
# remove outliers
q = df["Active_Market_Wallets"].quantile(0.99)
df = df[df["Active_Market_Wallets"] < q]
# remove outliers
q = df["Number_of_Sales"].quantile(0.99)
df = df[df["Number_of_Sales"] < q]
# remove outliers
q = df["Sales_USD"].quantile(0.80)
df = df[df["Sales_USD"] < q]
# remove outliers
q = df["Primary_Sales"].quantile(0.80)
df = df[df["Primary_Sales"] < q]
# set graphic variables
pyplot.plot(df.index, df.Sales_USD, color='tab:purple')
# set title and the axies
pyplot.gca().set(title='NFT Sales Over Time', xlabel='Time', ylabel='Amount of NFTs')
# show figure
pyplot.show()

df.Sales_USD.plot.line()

data_frame.plot.hist(by=str, bins=10)

data_frame = df
for columm in range(1,9):
  print(data_frame.columns[columm])
  data_frame.hist(column=data_frame.columns[columm])

df.boxplot(by='Sales_USD', column=['Primary_Sales'], grid=False)

df['Date_Year'] = pandas.to_datetime(df.Date, format='%Y-%m-%d')
df['Date_Year'] = df['Date_Year'].dt.year

df['Date_Month'] = pandas.to_datetime(df.Date, format='%Y-%m-%d')
df['Date_Month'] = df['Date_Month'].dt.month

df.boxplot(by='Date_Month', column=['Sales_USD'], grid=True)

df.boxplot(by='Date_Month', column=['Primary_Sales'], grid=True)

df = data_frame
for columm in range(1,9):
  print(data_frame.columns[columm])  
  q = df[data_frame.columns[columm]].quantile(0.80)
  df = df[df[data_frame.columns[columm]] < q]

pyplot.figure(figsize=(18, 5), dpi=80)

pyplot.plot(df.Sales_USD_cumsum, df.Sales_USD, color='tab:purple')
# set title and the axies
pyplot.gca().set(title='Sales USD', xlabel='Sales_USD Cumulatif Sum', ylabel='Amount of NFTs')
# show figure
pyplot.show()

max(df[df['Active_Market_Wallets'] > 0]['Active_Market_Wallets'])

df = data_frame
# df['Active_Market_Wallets'] = df[df['Active_Market_Wallets'] > 0]['Active_Market_Wallets']
# df['Primary_Sales'] = df[df['Primary_Sales'] > 0]['Primary_Sales']
x = df[['Date_Month']]
y = df['Sales_USD']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 100)

from sklearn.linear_model import LinearRegression
mlr = LinearRegression()  
mlr.fit(x_train, y_train)

print("Intercept: ", mlr.intercept_)
print("Coefficients:")
list(zip(x, mlr.coef_))

#Prediction of test set
y_pred_mlr= mlr.predict(x_test)
#Predicted values
print("Prediction for test set: {}".format(y_pred_mlr))

mlr_diff = pandas.DataFrame({'Actual value': y_test, 'Predicted value': y_pred_mlr})
mlr_diff.head()

pyplot.figure(figsize=(20, 10), dpi=150)
pyplot.plot(mlr_diff.index, mlr_diff['Actual value'], mlr_diff['Predicted value'], color='tab:purple')
pyplot.gca().set(title='NFT Sales Over Time', xlabel='Time', ylabel='Amount of NFTs')
pyplot.show()

# shape of the dataframe
df.shape

# data type of each column
df.dtypes

# number of null values
df.info()

from sklearn import metrics
import numpy as np

meanAbErr = metrics.mean_absolute_error(y_test, y_pred_mlr)
meanSqErr = metrics.mean_squared_error(y_test, y_pred_mlr)
rootMeanSqErr = np.sqrt(metrics.mean_squared_error(y_test, y_pred_mlr))
print('R squared: {:.2f}'.format(mlr.score(x,y)*100))
print('Mean Absolute Error:', meanAbErr)
print('Mean Square Error:', meanSqErr)
print('Root Mean Square Error:', rootMeanSqErr)

import matplotlib.pyplot as plt

plt.style.use('ggplot')

# histogram of the height
df['Primary_Sales'].plot(kind='hist', color='purple', edgecolor='black', figsize=(10,7))
plt.title('Distribution of Primary Sales', size=24)
plt.xlabel('Height (inches)', size=18)
plt.ylabel('Frequency', size=18)